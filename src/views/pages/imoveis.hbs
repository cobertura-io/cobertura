<body>

  {{>navbar}}

<section class="houses">
  <div class="row">
    <div class="col s4 list">
      <div class="cards">
      {{#each houses }}
        {{>card this}}
      {{/each}}
      </div>
    </div>
    <div id='map' class="col s8 map"></div>
      <div id='content' class="card" >
        <div class="badge">À VENDA</div>
        <div class="house-description">
          <div class="title">Uma casa incrível</div>
          <div class="address">Rua Gisele Martins, Cidade Morumbi</div>
          <div class="price">R$ 570.000,00</div>
          <hr>
          <button class='button'>Agendar visita</button>
        </div>
      </div>
    <form class="search-group">
      <input type="text" name="search-item" id="search-item" class="input-search" placeholder="Pesquisar"
        autocomplete="off">
      <button class="btn btn-search fa"></button>
    </form>
  </div>
</section>

  <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
  <script src="../js/bootstrap.bundle.min.js"></script>

  <!-- Google Maps -->
  <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyATtQNsJcdUPFYLDundA0OV9FWlN5WXpak&callback=initMap" async defer></script>
  <script>
    var map,popup, Popup;
    var locations = []

    houses = {{{json houses}}}
    houses.map((house) => locations.push(house))

    var iconBase = 'http://localhost:8080/images/marker.png'
    var icons = {
      house: {
        icon: iconBase
      },
    };

    function initMap() {
      map = new google.maps.Map(document.getElementById('map'), {
        center: { lat: -23.2530996, lng: -45.898194100000005 },
        zoom: 15,
        disableDefaultUI: true
      });
      map.setOptions({ styles: styles['hide'] });

      var markers = locations.map(function (location, i) {
        return new google.maps.Marker({
          position: { lat: location.lat, lng: location.lng },
          size: new google.maps.Size(10, 10),
          title: 'house: 0',
          icon: iconBase,
          house: {
            id: location.id,
            title: location.title,
            price: location.price,
            address: location.address,
            lat: location.lat,
            lng: location.lng
          }
        });
      });

      markers.map(marker => {
        marker.addListener('click', function() {
          console.log(marker)
          Popup = createPopupClass();
          popup = new Popup(
            new google.maps.LatLng(marker.house.lat, marker.house.lng),
            document.getElementById('content'), marker.house);
          popup.setMap(map);
          //infowindow.open(map, marker);
          //infowindow.setContent(contentWindow(marker.house.title, marker.house.address, marker.house.price))
        });
      })

      var mcOptions = {
        styles: [{
          url: iconBase,
          width: 20,
          height: 30,
          textSize: 14,
          fontFamily: "CircularStd",
          textColor: "white",
        }]
      };

      var markerCluster = new MarkerClusterer(map, markers, mcOptions);

      // Try HTML5 geolocation.
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
          var pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
          };

          map.setCenter(pos);
        }, function () {
          handleLocationError(true, infoWindow, map.getCenter());
        });
      } else {
        // Browser doesn't support Geolocation
        handleLocationError(false, infoWindow, map.getCenter());
      }
    }

/*
    function handleLocationError(browserHasGeolocation, infoWindow, pos) {
      infoWindow.setPosition(pos);
      infoWindow.setContent(browserHasGeolocation ?
        'Error: The Geolocation service failed.' :
        'Error: Your browser doesn\'t support geolocation.');
      infoWindow.open(map);
    }
*/
    var styles = {
      default: null,
      hide: [
        {
          featureType: 'poi',
          stylers: [{ visibility: 'off' }]
        },
        {
          featureType: 'transit',
          elementType: 'labels.icon',
          stylers: [{ visibility: 'off' }]
        }
      ]
    };

    // Create popup
    function createPopupClass() {
      function Popup(position, content, data) {
        this.position = position;
        content.classList.add('popup-bubble');

        content.children[0].innerHTML = 'À VENDA'
        content.children[1].children[0].innerHTML = data.title
        content.children[1].children[1].innerHTML = data.address
        content.children[1].children[2].innerHTML = data.price
    // This zero-height div is positioned at the bottom of the bubble.
    var bubbleAnchor = document.createElement('div');
    bubbleAnchor.appendChild(content);

    // This zero-height div is positioned at the bottom of the tip.
    this.containerDiv = document.createElement('div');
    this.containerDiv.classList.add('popup-container');
    this.containerDiv.appendChild(bubbleAnchor);

    // Optionally stop clicks, etc., from bubbling up to the map.
    google.maps.OverlayView.preventMapHitsAndGesturesFrom(this.containerDiv);
  }
  // ES5 magic to extend google.maps.OverlayView.
  Popup.prototype = Object.create(google.maps.OverlayView.prototype);

  /** Called when the popup is added to the map. */
  Popup.prototype.onAdd = function() {
    this.getPanes().floatPane.appendChild(this.containerDiv);
  };

  /** Called when the popup is removed from the map. */
  Popup.prototype.onRemove = function() {
    if (this.containerDiv.parentElement) {
      this.containerDiv.parentElement.removeChild(this.containerDiv);
    }
  };

  /** Called each frame when the popup needs to draw itself. */
  Popup.prototype.draw = function() {
    var divPosition = this.getProjection().fromLatLngToDivPixel(this.position);

    // Hide the popup when it is far out of view.
    var display =
        Math.abs(divPosition.x) < 4000 && Math.abs(divPosition.y) < 4000 ?
        'block' :
        'none';

    console.log(display)
    if (display === 'block') {
      this.containerDiv.style.display = "none";
      console.log(this.containerDiv.style.display)
      this.containerDiv.style.left = divPosition.x + 'px';
      this.containerDiv.style.top = divPosition.y + 'px';
    }
    if (this.containerDiv.style.display !== display) {
      this.containerDiv.style.display = display;
    }
  };

  return Popup;
}
  </script>
</body>